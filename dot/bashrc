#!/usr/bin/env bash
# File       : bashrc
# Created    : Mon 08 Dec 2014 19:31:26
# Modified   : <2021-06-21 Mon 09:28:52 BST>
# Maintainer : #RÎ»atan
# Synopsis   : <BASH configuration file>

# Source global definitions
if [ -f /etc/bashrc ]
then
   source /etc/bashrc
fi

# ------------------------------------------------------------------------------
#+EXPORTS
shopt -s histappend

# Resolve tramp hang
# https://www.emacswiki.org/emacs/TrampMode
if [ $TERM = "dumb" ]
then
    PS1='$ '
else
    PS1="(${OSTYPE})[\u@\h \w]\\$: "
fi

export PS1
export HISTCONTROL=ignoredups:erasedups
export INFOPATH="$INFOPATH":/usr/share/info
export VISUAL="/usr/bin/emacsclient -cn"
export EDITOR="$VISUAL"

# Guix operating system required exports
# https://guix.gnu.org/manual/en/html_node/Application-Setup.html
if [ -e /gnu/store ]
then
    export GUIX_LOCPATH="${HOME}/.guix-profile/lib/locale"
    export GUIX_PROFILE="${HOME}/.guix-profile"
    source "${GUIX_PROFILE}/etc/profile"

    # Emacs Tramp SSH access promt
    if [ $TERM = "dumb" ]
    then
        PS1='$ '
    else
        PS1="(guix/${OSTYPE})[\u@\h \w]\$: "
    fi

    # https://guix.gnu.org/manual/en/html_node/X_002e509-Certificates.html
    if [ -e "$HOME/.guix-profile/etc/ssl/certs" ]
    then
        export SSL_CERT_DIR="$HOME/.guix-profile/etc/ssl/certs"
        export SSL_CERT_FILE="$HOME/.guix-profile/etc/ssl/certs/ca-certificates.crt"
        export GIT_SSL_CAINFO="$SSL_CERT_FILE"
    fi

    if [ -n "$GUIX_ENVIRONMENT" ]
    then
        PS1="[env: ${GUIX_ENVIRONMENT}]\n> "
    fi
    export PS1
fi

# ------------------------------------------------------------------------------

_err()
{ # All errors goes to stderr.
    printf "[%s]: %s\n" "$(date +%s.%3N)" "$1" >&2
}

_msg()
{ # Feedback messages to stdout.
    printf "[%s]: %s\n" "$(date +%s.%3N)" "$1" >&1
}

_ssh_hosts()
{ # Return a list of hosts set in one of SSH config files.
    grep '^Host' ~/.ssh/config ~/.ssh/config.d/* 2>/dev/null \
        | grep -v '[?*]' \
        | cut -d ' ' -f 2
}

_ssh()
{ # Add aoutcomlition to ssh reading from availalbe configs
  # Ref: https://dev.to/ahmedmusallam/how-to-autocomplete-ssh-hosts-1hob
    local cur prev opts

    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"

    COMPREPLY=( $(compgen -W "$(_ssh_hosts)" -- ${cur}) )
    return 0
}

complete -F _ssh ssh

# ------------------------------------------------------------------------------
#+FUNCTIONS

edf()
{ # Open file in a defaul EDITOR
    local file="$1"

    $EDITOR "$file"
}

whatp()
{ # Return a name of a package for given command.
    local cmd
    cmd="$1"
    if command -v rpm &>/dev/null; then
        rpm -qf $(which "$cmd")
    elif command -v dpkg &>/dev/null; then
        dpkg-query -S $(which "$cmd")
    else
        _err "rpm, dpkd-query not available."
    fi
}

whatc()
{ # Return a list of commands for given package name.
    local pckg
    pckg="$1"
    rpm -ql "$pckg" | grep -oP "(?<=in/).+"
}

whatd()
{ # Return a list of command with short doc string of a given package
    local pckg
    pckg="$1"
    whatis $(whatc "$pckg")
}

# End of bashrc
