#!/usr/bin/env bash
# File       : .bashrc
# Created    : Mon 08 Dec 2014 19:31:26
# Modified   : <2019-6-15 Sat 01:42:14 BST> Sharlatan
# Maintainer : sharlatan, <sharlatanus@gmail.com>
# Short      : BASH config file

# Source global definitions
if [ -f /etc/bashrc ]; then
   . /etc/bashrc
fi


# ------------------------------------------------------------------------------
#+EXPORTS
shopt -s histappend
export HISTCONTROL=ignoredups:erasedups
export INFOPATH="$INFOPATH":/usr/share/info
export PATH="${PATH}:${HOME}/.cargo/bin:${HOME}/.local/bin"
# export PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"
export VISUAL="/usr/bin/emacsclient -cn"
export EDITOR="$VISUAL"

export PERL5LIB="${HOME}/.local/lib/perl5${PERL5LIB:+:${PERL5LIB}}"
export PERL_LOCAL_LIB_ROOT="${HOME}/.local/share/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"
export PERL_MB_OPT="--install_base \"${HOME}/.local/share/perl5\""
export PERL_MM_OPT="INSTALL_BASE=${HOME}/.local/share/perl5"

# ------------------------------------------------------------------------------
#+SETTINGS

# Command promt hacks, descriptive output.

# ┌─[sharlatan@base201215]-[22/07/17 W29 13:05]
# ├─[/home/sharlatan/Projects/my-GitHub/cix/spices]
# ├─[PID 23610 CHS 1]-[0.182]
# └─> ~$

_prmtcmd()
{
   echo ${PWD} \($(git branch 2>/dev/null|grep '^*'|colrm 1 2)\)
}

# History hacks
_err()
{ # All errors goes to stderr.
    printf "[%s]: %s\n" "$(date +%s.%3N)" "$1" >&2
}

_msg()
{ # Feedback messages to stdout.
    printf "[%s]: %s\n" "$(date +%s.%3N)" "$1" >&1
}

# ------------------------------------------------------------------------------
#+FUNCTIONS

edf()
{ # Open file in a defaul EDITOR
    local file="$1"

    $EDITOR "$file"
}

whatp() {
    # Return a name of a package for given command.
    local cmd
    cmd="$1"
    if command -v rpm &>/dev/null; then
        rpm -qf $(which "$cmd")
    elif command -v dpkg &>/dev/null; then
        dpkg-query -S $(which "$cmd")
    else
        _err "rpm, dpkd-query not available."
    fi
}

whatc() {
    # Return a list of commands for given package name.
    local pckg
    pckg="$1"
    rpm -ql "$pckg" | grep -oP "(?<=in/).+"
}

whatd() {
    # Return a list of command with short doc string of a given package
    local pckg
    pckg="$1"
    whatis $(whatc "$pckg")
}

# ------------------------------------------------------------------------------
#+FUZZY_SEARCH

# Fuzzy wrappwer for fzf, skim
# https://github.com/junegunn/fzf
# https://github.com/lotabout/skim
fe() {
    # fe [fuzzy pattern] open the selected file with the default editor
    # -Bypass fuzzy finder if ther's only one match (--selected-1)
    # - Exit if ther's no match (--exit-0)

    cd
    local file
    file=$(fzf-tmux -d 20% --query="$1" --select-1 --exit-0)
    [ -n "$file" ] && ${EDITOR} "$file"
}

fd() {
    # fd - cd to selected directory (excluding hiden)

    if command -v sk 2> /dev/null; then
        cd && cd "$(dirname "$(sk --regex)")"
    elif command -v fzf 2> /dev/null; then
        cd $(fzf)
    else
        echo use find in the end
    fi
}

fda() {
    # fda - cd to any (including hiden) directory
    local dir
    dir=$(find ${1:-.} -type d 2> /dev/null | fzf-tmux -d 20% +m) &&
        cd "$dir"
}

fdf() {
    #
    # fda cd into directory of the selected file
    #
    local file
    local dir
    file=$(fzf-tmux -d 20% +m -q "$1") && dir=$(dirname "$file") &&
        cd "$dir"
}


## percol
# https://github.com/mooz/percol
mp () {
    # Read man with percol
     tmux split-window 'man $(ls /usr/bin | percol)'
}
m() {
    #function_body
    man $1 | percol
}
gpom () {
    git push origin master
}

mcd() { mkdir -p "$1" && cd "$1";}

# ------------------------------------------------------------------------------
#+ALIASES

alias c='clear'
alias em='emacs -nw'
alias aplay='ansible-playbook'

alias ..='cd ..'
alias ...='cd ../../'
alias ....='cd ../../../'
alias .....='cd ../../../../'
alias ......='cd ../../../../../'

# ls tricks
alias l="ls -lhGgo"
alias ll="ls -lh"
alias la="ls -lhGgoA"
alias lt="ls -lhGgotr"
alias lS="ls -lhGgoSr"
alias l.="ls -lhGgod .*"
alias lhead="ls -lhGgo | head"
alias ltail="ls -lhGgo | tail"
alias lless='ls -lhGgo | less'
alias u="cd ..;ls"

# Scheme alias
alias guile="guile2.2"

# End of .bashrc
