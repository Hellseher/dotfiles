;;;; sbclrc -- configuration file for SBCL
;;;; Created  :
;;;; Modified : <2018-9-30 Sun 23:35:59 BST> Sharlatan
;;;; Author   :
;;;; Synopsis    : <

;;;; Commentary:

;;;; Code:

(defvar *usr-sbcl-src-path*)
(defvar *usr-ql-init-path*)
(defvar *usr-ql-projects-path*)

(defun from-home-path (path)
  "Buuild a absolute path to user target directory including $HOME."
  (merge-pathnames path (user-homedir-pathname)))

(setf *usr-sbcl-src-path* (from-home-path "Data/sft/src/sbcl/")
      *usr-ql-projects-path* (list
                              (from-home-path "Projects/hck/Lisp/CommonLisp/")
                              (from-home-path "Data/sft/src/projects-common-lisp/"))
      *usr-ql-init-path* (from-home-path "quicklisp/setup.lisp"))

;; Path to SBCL source code directory
(when (probe-file *usr-sbcl-src-path*)
  (sb-ext:set-sbcl-source-location *usr-sbcl-src-path*))

#-quicklisp
(when (probe-file *usr-ql-init-path*)
  (load *usr-ql-init-path*))

(when (probe-file *usr-ql-projects-path*)
  (push *usr-ql-projects-path* ql:*local-project-directories*))

(require :asdf)

;;; If a fasl was stale, try to recompile and load (once).
(defmethod asdf:perform :around ((o asdf:load-op)
                                 (c asdf:cl-source-file))
  (handler-case (call-next-method o c)
    ;; If a fasl was stale, try to recompile and load (once).
    (sb-ext:invalid-fasl ()
      (asdf:perform (make-instance 'asdf:compile-op) c)
      (call-next-method))))

;;;; sbclrc ends here

