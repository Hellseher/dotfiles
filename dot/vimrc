" File          : .vimrc
"
" Created       : Sun 16 Nov 2014 01:09:50
" Last Modified : Sun 10 Jan 2016 01:20:51
" Maintainer    : sharlatan <mailto@olee.co.uk>
" License       : Same as Vim
" Credits       : See INFO SOURCES
" Description   :    This .vimrc file contains a bundle of settings for comfortable
"               : work with various files (*.py, *.sh, *.vim, *.md, *.c etc.).
"               : I tried to follow 
"               :   "The division of the perceived universe into parts and wholes
"               : is convenient and may be necessary, but no necessity determines
"               : how it shall be done."
"               : G. Bateson presupposition from "Mind and nature" 
"               : [p. 47, ISBN 0-00-654119-4]
"               :   The file divided into logical parts, which should be
"               : understood without further explanation. 
"               : Main settings are folded by [marker] method. 
"               : To open all folders type {zi}


"-=:[ PRESETS ]:=-
set nocompatible
set encoding=utf-8
filetype off
let mapleader=","

""-=:[ PLUGINS INSTAL ]:=-                                                    {{{
" ~/.vim/bundle/                            " default path to all plugins
"
set rtp+=~/.vim/bundle/Vundle.vim           " set the runtime path to Vundle
call vundle#begin()
 " auto upde/install on start up
"----[ core
Plugin 'gmarik/Vundle.vim'                  " required, let Vundle manage Vundle
""
"----[ startup
Plugin 'mhinz/vim-startify'                 " log open files 
Plugin 'Hellseher/vim-template'             " preseted templates on startup
Plugin 'timestamp.vim'                      " add timestamps to file's header
"
"----[ completion | snippets
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'                 " 
"Plugin 'scrooloose/nerdcommenter'
"Plugin 'Valloric/YouCompleteMe'
Plugin 'tpope/vim-surround'                 " dual symbol completion
""Plugin 'Shougo/unite.vim'                   " searches and display info source
""
""----[ tabulations
Plugin 'godlygeek/tabular'                  " smart aligning text
"
""----[ visual
Plugin 'scrooloose/nerdtree'                " console file browser
Plugin 'kien/ctrlp.vim'                     " Fuzzy file, buffer, mru, tag, etc
Plugin 'tagbar'                             " dependancy: Exuberant ctags 5.5
Plugin 'bling/vim-airline'                  " light  status/tabline
Plugin 'Xuyuanp/nerdtree-git-plugin'        " git mode visible chars
"Plugin 'gundo'                              " undo tree with style
"Plugin 'Yggdroot/indentLine'                " display the indention levels
"
""----[ syntax
Plugin 'scrooloose/syntastic'
"
""----[ git
Plugin 'tpope/vim-fugitive'                 " the best Git wrapper
"Plugin 'tasklist.vim'                       " helps to find TO DO
"
"----:[ languages ]:----
" Languages bandles here. Documents, refactorings.
"
"------[ Clojure
Plugin 'tpope/vim-fireplace'                " Clojure REPL
Plugin 'guns/vim-clojure-static'
Plugin 'tpope/vim-leiningen'
Plugin 'tpope/vim-classpath'
"Plugin 'vim-scripts/paredit.vim' 

"------[ GoLang
Plugin 'fatih/vim-go'                      " Go support for Vime
""------[ Python
""Plugin 'klen/python-mode'                  " Python code very quickly
""------[ Ruby
Plugin 'tpope/vim-rails'
"------[ Node.js
Plugin 'moll/vim-node'
"------[ JavaScript
Plugin 'jelera/vim-javascript-syntax'
"------[ Markups
Plugin 'othree/html5.vim'                   " HTML5, SVG omnicomplete fun
Plugin 'mattn/emmet-vim'                    " Zen coding for HTML/CSS
Plugin 'plasticboy/vim-markdown'
Plugin 'gregsexton/MatchTag'
"Plugin 'chase/vim-ansible-yaml'             " sntx hl and indent for Ansible
"
"----[ misc
Plugin 'beloglazov/vim-online-thesaurus'    " Online theasurus
Plugin 'tcl.vim'
"
"
call vundle#end()                           " all plugins before this line
""
"" Toggle all settings on
filetype on
filetype indent on
filetype plugin on
""<END OF PLUGINS INSTAL>-----------------------------------------------------}}}
"
""-=:[ BRIEF HELP ]:=-                                                        {{{
"" :PluginInstall    - installs plugins; append `!` to update or just
"" :PluginUpdate
"" :PluginClean      - confirms removal of unused plugins; append `!` to
"" see :h Vundle for more details or wiki for FAQ
"" to get help for any plugins just h:<plugin's_name>
"" to open/close any tags (NERDTree, tagbar) pres <o>
""<END OF BRIEF HELP>---------------------------------------------------------}}}
"
"-=:[ PLUGINS SETTINGS ]:=-                                                  {{{
"    Plugins which need settings here.
"
""---[ NERDTree
let NERDTreeShowHidden=1                    " show hiden files
"
" ---[ NERDTree Git Plugin
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "‚úπ",
    \ "Staged"    : "‚úö",
    \ "Untracked" : "‚ú≠",
    \ "Renamed"   : "‚ûú",
    \ "Unmerged"  : "‚ïê",
    \ "Deleted"   : "‚úñ",
    \ "Dirty"     : "‚úó",
    \ "Clean"     : "‚úîÔ∏é",
    \ "Unknown"   : "?"
    \ }
"
"---[ Syntastic
"https://github.com/scrooloose/syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
"
""---[ vim-template
""let g:templates_plugin_loaded = 1          " skip loading of the plugin
""let g:templates_plugin_loaded = 1          " disable / enable insertion 
""
""----[ vim-markdown
let g:vim_markdown_folding_disabled=1
"
"---[ vim-airline
" :help ariline
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#bufferline#enabled = 1
let g:airline#extensions#syntastic#enabled = 1
"let g:airline#extensions#tabline#left_alt_sep = '‚îÉ'
let g:airline_section_y = '%{&fileencoding?&fileencoding:&encoding}'
let g:airline_section_z = '%lùÑò %p%%%c‚´º'
let g:airline_left_sep = 'ÓÇ∞'
let g:airline_right_sep = 'ÓÇ≤'
let g:airline_symbols.linenr = '¬∂'
let g:airline_symbols.readonly = 'ÓÇ¢'
let g:airline_symbols.branch = '‚éá'
let g:airline_symbols.paste = '‚à•'
let g:airline_symbols.whitespace = '‚çü'
"
"---[pythot-mode
"let g:pymode_lint_on_write = 0
"
"---[ YouCompleteMe
let g:ycm_key_list_select_completion=['<c-j>', '<Enter>']
"
"---[ UltiSnips
let  g:UltiSnipsExpandTrigger="<tab>"
"
"---[ indentLine
let g:indentLine_char = '‚îÜ'
"
""<END OF PLUGINS SETTINGS>---------------------------------------------------}}}

""-=:[ PLUGIN MAPPING ]:=-                                                    {{{
"
""----[ NERDTree
nmap <leader>nt :NERDTreeToggle<CR>
" Find current file in the tree
nmap <leader>/ :NERDTreeFind<CR>
"----[ tagbar
nmap <leader>tg :TagbarToggle<CR>
""----[ GunDo
"nnoremap <Leader>gd :GundoToggle<CR>
""<END OF PLUGIN MAPPING>-----------------------------------------------------}}}

"-=:[ VIM SETTINGS ]:=-                                                      {{{
"
syntax on
"set t_Co=256
set background=dark
colorscheme solarized
"
"
"----:[ Visual Settings ]:----
"    Settings that affect visual appereance, such as Colorscheme,
" numbers, etc., can be changed here.


"------[ gVim
if has("gui_running")
    set background=light
    set guioptions-=m                       "remove menu bar
    set guioptions-=T                       "remove toolbar
    set guioptions-=r                       "remove right-hand scroll bar
    set guioptions-=L                       "remove left-hand scroll bar
    set guifont=Monospace\ 11
    set mouse=c                             " disable mouse click
    set lines=999 columns=999
    hi Folded gui=NONE
endif
"
"
"------[ visual marks
hi MatchParen cterm=bold ctermbg=NONE ctermfg=Red
set hlsearch
set list                                   " show unprintable symbols
set listchars=eol:¬¨,tab:‚ä≥\                 " end of line, tabulation
hi SpecialKey ctermfg=darkGray ctermbg=NONE
set fillchars=vert:‚îÇ                       " window separation character
hi VertSplit ctermbg=NONE

"------:[ lines ùÑô ]:------
"--------[ wrap|break
set wrap                                    " wrap long ln
set linebreak                               " break at words
set tw=79                                   " ln length

"--------[ numbers|hl ln & column
set number
set relativenumber
set cursorcolumn                            " hl cursorcolumn
autocmd InsertLeave * set cursorcolumn
autocmd InsertEnter * set nocursorcolumn
set cursorline                              " hl CursorLine
autocmd InsertLeave * set cursorline
autocmd InsertEnter * set nocursorline

"--------[ status
set noshowmode
set showcmd                                 " show commands in bottom side
set laststatus=2                            " show status line 
"set title                                   " show buffer name
set ch=2                                    " command line 2 lines

"--------[ indention
set tabstop=4                               " 1 tab = 4 spaces
set shiftwidth=4                            " number of shifts with >|< 
set softtabstop=4                           " 4 spaces per tab
set expandtab                               " tab by spaces
set autoindent                              " align the new line indent
set backspace=2                             " back spaces over indent

"----[ completion, pop up
set pumheight=7                             " max num to show in pop-up menu
set wildmenu                                " command-line completion

"----[ folding
set fen                                     " enable folding
set fdm=marker                              " fold method
hi Folded term=NONE cterm=NONE
hi FoldColumn ctermfg=100

"----[ file types
au FileType html setl tw=100 sw=2 sts=2
"
"
"----[ keymap and spelling
set keymap=russian-jcukenwin                " set up keymaping for ru
set iminsert=0
set imsearch=0
highlight lCursor guifg=NONE guibg=Cyan
set spelllang=en,ru

"----[ misc
" Look up the help for each options
set ttimeout
set ttimeoutlen=100
set hidden
set visualbell
set noerrorbells
" Try to keep it function disabled, it has compatible problem with Syntastic
"set shellcmdflag=-ic
set nobackup
set noswapfile
"<END OF VIM SETTINGS>------------------------------------------------------}}}

"-=:[ VIM MAPPING ]:=-                                                       {{{
"
" ---[ copy | paste
" between VIM sessions
" thanks to https://github.com/mokevnin
vmap <Leader>y :w! ~/.vim/.vbuf<CR>
nmap <Leader>y :.w! ~/.vim/.vbuf<CR>
nmap <Leader>p :r ~/.vim/.vbuf<CR>
" enter paste mode, on midle clic mouse
nnoremap <leader>m :r!xclip -o<CR>
inoremap <leader>m <Esc>:r!xclip -o<CR>
"
" header
inoremap <leader>hd -=:[  ]:=-<Esc>F[lli
nnoremap <leader>hd a-=:[  ]:=-<Esc>F[lli
" end of
inoremap <leader>ef <end<Esc>bgUwA of<Esc>bgUwA  ><Esc>ha
" spell checking
nnoremap <silent> <leader>sp :set spell!<CR>
"
" off hl search
nnoremap <leader>, :nohl<CR>
"
"win switching
nnoremap <leader>h <C-w>h
nnoremap <Leader>l <C-w>l
nnoremap <Leader>k <C-w>k
nnoremap <Leader>j <C-w>j
"win moving
nnoremap <C-h> <C-w>H
nnoremap <C-l> <C-w>L
nnoremap <C-k> <C-w>K
nnoremap <C-j> <C-w>J
"
" date insertion
inoremap <leader>dt <Esc>o<Esc>a<C-R>=strftime("%a %d %b %Y %I-%M-%S ")<CR><Esc>
nnoremap <leader>dt o<Esc>a<C-R>=strftime("%a %d %b %Y %I-%M-%S ")<CR><Esc>
"
" Edit my Vimc file
nnoremap <Leader>ev :vsplit $MYVIMRC<cr>
nnoremap <Leader>sv :source $MYVIMRC<cr> 
"<END OF VIM MAPPINGS>-------------------------------------------------------}}}

"-=:[ FUNCTIONS ]:=-                                                         {{{
"
" fill rest of line with characters
function! FillLine( str )
    " set tw to the desired total length
    let tw = &textwidth
    if tw==0 | let tw = 80 | endif
    " strip trailing spaces first
    .s/[[:space:]]*$//
    " calculate total number of 'str's to insert
    let reps = (tw - col("$")) / len(a:str)
    " insert them, if there's room, removing trailing spaces (though forcing
    " there to be one)
    if reps > 0
        .s/$/\=(' '.repeat(a:str, reps))/
    endif
endfunction

"<END OF FUNCTIONS>----------------------------------------------------------}}}

"-=:[ ABBREVIATIONS ]:=-                                                     {{{
"
"----[ Russian
"set langmap=–§–ò–°–í–£–ê–ü–†–®–û–õ–î–¨–¢–©–ó–ô–ö–´–ï–ì–ú–¶–ß–ù–Ø;abcdefghijklmnopqrstuvwxyz
"set langmap=—Ñ–∏—Å–≤—É–∞–ø—Ä—à–æ–ª–¥—å—Ç—â–∑–π–∫—ã–µ–≥–º—Ü—á–Ω—è;abcdefghijklmnopqrstuvwxyz
" add something here



"<END of ABBREVIATIONS>------------------------------------------------------}}}

"-=:[ INFO SOURCES ]:=-                                                      {{{
"
"----[ txt
" http://habrahabr.ru/post/239579/
" http://habrahabr.ru/post/239579/
" http://habrahabr.ru/post/151128/
" http://www.moolenaar.net/habits_ru.html
" http://www.intelesyscorp.com/blog/awesome-vim-configuration
" http://rayninfo.co.uk/vimtips.html
"
" ----[ scast
" www.derekwyatt.org
" www. vimcasts.org
"
" ----[ .vimrc
" https://github.com/justinmk/config/blob/master/.vimrc
" https://github.com/drmikehenry/vimfiles/blob/master/vimrc
" https://github.com/derekwyatt/vim-config/blob/master/vimrc
" https://github.com/timlar/vim/blob/master/.vimrc
" https://github.com/skwp/dotfiles/blob/master/vimrc
" http://agentzh.org/misc/.vimrc
" http://pastebin.com/paPWQ5fE
" http://amix.dk/vim/vimrc.html
"<END OF INFO SOURCES>-------------------------------------------------------}}}
" <END OF  VIMRC>-------------------------------------------------------------
