#! /bin/sh
# File          :  install.sh
# Created       :  Fri 23 Oct 2015 23:15:47
# Last Modified :  Sat 09 Jan 2016 02:20:24
# Maintainer    :  sharlatan, <sharlatanus@gmail.com>
# License       :  Same as Bash (GPL)
# Credits:
#
# Install Working Invironment
##################
#  _          _  #
# (_)        (_) #
#  __      __  #
# | \ \ /\ / / | #
# | |\ V  V /| | #
# |_| \_/\_/ |_| #
#                #
##################

ABS_PATH="$(dirname $(readlink -f $0))"
USR_PATH="$(echo ${ABS_PATH} | grep -oP "\/home\/\w+")"
SET_LIST="$(grep -oP "[A-Z]\s\w+" "${ABS_PATH}/pack.list" | sort)"
DOT_LIST="$(ls "${ABS_PATH}/dotfiles")"

PACKAGE_MANAGERS=(yum pacman emerge zypp apt-get)


if [[ $UID -ne 0 ]]; then
    echo Error: This script has to be run under the root user.
    exit 1
fi
############################################################################
#                     -=:[GLOBAL FUNCTIONS DEFINITIONS ]:=-                #
############################################################################
# Required function for convenient installation.  {{{
#

_help() {
     cat << EOF
usage: $0 [-hadrs]
    -h   Show this message.
    -a   Complete installation.

    -d   Link all dotfiles to $USR_PATH.
    -r   Add extra repositoris.
    -s   Install set of packages.
EOF
 }

_package_manager() {
    #
    # Use appropriate package manager to instal.
    #
    #echo ${PACKAGE_MANAGERS[*]}
    #exit 1
    if [[ -x "$(command -v dnf)" ]]; then
        dnf update
        dnf install $(_set_list) || { echo "Failed"; exit 0; }
    elif [[ -x "$(command -v yum)" ]]; then
        yum update
        yum install $(_set_list)
        exit 0
    elif [[ -x "$(command -v apt-get)" ]]; then
        apt-get update
        apt-get install $(_sset_list)
        exit 0
    else 
        echo Non of yum, dnf, apg-get was found.
        exit 1
    fi
}

_set_list() {
    #
    # Parse pack.list file, and show specific sets
    #
    if [ $get_set == "A" ] || [ $get_set == "all" ]; then
        grep -vP "[A-Z]|\}|^$" ./pack.list
    fi

    sed -n "/$get_set/,/\}/{/$get_set/d;/\}/d;p;}" ./pack.list
    # awk -v pat="$get_set" \ '$0 ~ pat{p=1; print; next} \ p&&/\}/{p=0};p' ./pack.list
}

_set_install() {
    #
    # Install set of packages;
    #
    _set_list
    printf  "\npackeges will be installed [y/N]: "
    read -t 10 yes_no
    
    if [[ "$yes_no" != "y" ]]; then
        echo leave
        exit 1
    fi
    _package_manager

}

_dot_link() {
    #
    # Link all dot files to $(HOME)
    #
    printf "Files will be linked to ${USR_PATH}\n${DOT_LIST}"
    for dot_file in ${DOT_LIST}; do
        ln -sf "${ABS_PATH}/dotfiles/$dot_file" "${USR_PATH}/.$dot_file"
    done
}
# }}}

# -=:[ MAIN ]:=-{{{
#
# Meaty part of the installation
#

if [[ $# -eq 0 ]]; then
    printf "No arguments provided\n\n"
    _help && exit 1
fi

OPTIONS=":hadrs:"
while getopts "${OPTIONS}" opt; do
    case $opt in
        h) 
            _help && exit 1
            ;;
        a)
            echo Complete Installation!
            ;;
        d)
            _dot_link && exit 0
            ;;
        r)
            echo Add repository!
            ;;
        s)
            get_set=($OPTARG)
            _set_install
            ;;
        \?) echo "Unknown option: -$OPTARG" >&2 && echo
            _help && exit 1
            ;;
        :) 
            echo Aveilable sets for installation:
            printf "\n${SET_LIST}\n" >&2 && exit 1
            ;;
        *) echo "Unimplemented option: -$OPTARG" >&2
            exit 1
            ;;
    esac
done
# }}}
