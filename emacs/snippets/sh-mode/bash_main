# -*- mode: snippet -*-
# name: bash_main
# key: bash_main
# --
#!/usr/bin/env bash
# File     : `(buffer-name)`
# Created  : `(format-time-string "<%Y-%m-%d %a %T %Z>" (current-time))`
# Modified : `(format-time-string "<%Y-%m-%d %a %T %Z>" (current-time))`
# Author   : `(concat user-full-name " <" user-mail-address ">")`
# Synopsis : <$1>

set -e

if [ "${BASH_VERSINFO[0]}" -lt "4" ]
then
    echo "Bash 4 or higher is required to proceed. Exit."
    exit 1
fi

## Commentary:
#

# ------------------------------------------------------------------------------
#+CHANGELOG:
# 0.1.0 :: `(format-time-string "<%Y-%m-%d %a %T %Z>" (current-time))`
#       + Script initiation.
#
# ------------------------------------------------------------------------------
#+DEFAULTS:

SCRIPT_VERSION=0.1.0
SCRIPT_NAME=`(buffer-name)`

REQUIRE=(
    dirname
    readlink)

PASS=\$'[ \033[32;1mPASS\033[0m ]'
FAIL=\$'[ \033[31;1mFAIL\033[0m ]'

_err()
{ # All errors go to stder.
    printf "[%s]: %s\n" "\$(date +%s.%3N)" "\$1"
}

_msg()
{ # Default message to stdout.
    printf "[%s]: %s\n" "\$(date +%s.%3N)" "$1"
}

chk_require()
{ # Check if every required command is available before proceed to main part.
    declare -a cmds
    declare -a warn

    for c in \${REQUIRE[@]}
    do
        if ! command -v "\$c" &>/dev/null
        then
            warn+=("\$c")
        fi
    done

    if [ "\${#warn}" -ne "0" ]
    then
        {
            _err "\${FAIL} Commands <\${warn[*]}> are not available. Exit."
            exit 1
        }
    fi
}

# ------------------------------------------------------------------------------
#+MAIN

main()
{
    printf "Start %s %sv at %s\n\n" \$SCRIPT_NAME \$SCRIPT_VERSION \$(date)
    chk_require

    ABS_PATH="\$(dirname "\$(readlink -f "\$0")")"
    echo "\$ABS_PATH"
}

main "\$@"
# End of `(buffer-name)`
